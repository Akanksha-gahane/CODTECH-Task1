<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do Ape</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500&display=swap" rel="stylesheet">
    <script src="https://kit.fontawesome.com/8e8d1c1b95.js" crossorigin="anonymous"></script>
    <style>
        @font-face {
            font-family: 'bot';
            src: url('path/to/harlott.woff2') format('woff2'),
                 url('path/to/harlott.woff') format('woff');
            font-weight: normal;
            font-style: normal;
        }

        body {
            font-family: 'Harlott', cursive;
            background-color: #B0E0E6; /* PowderBlue background */
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .container {
            font-family: 'Harlott', cursive;
            background-color: #ffccff; /* Sugar Chic background for the container */
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            width: 400px;
            max-width: 90%;
        }

        h1 {
            color: #000033; /* Blue Midnight Blue Stratos color */
            text-align: center;
            margin-bottom: 20px;
            font-size: 2.5rem;
        }

        .input-section {
            margin-bottom: 20px;
        }

        input[type="text"], input[type="date"], input[type="time"] {
            padding: 12px;
            margin-bottom: 10px;
            border: 1px solid #000000; /* Black border */
            border-radius: 5px;
            font-size: 16px;
            background-color: #fffaf0; /* Light cream background for input fields */
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: all 0.2s;
            width: calc(100% - 24px);
        }

        input[type="text"]:focus, input[type="date"]:focus, input[type="time"]:focus {
            border-color: #9966CB; /* Amethyst border on focus */
            box-shadow: 0 0 5px rgba(255, 105, 180, 0.5);
            outline: none;
        }

        button {
            padding: 12px;
            background-color: #847EDE; /* Floral background for buttons */
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
            width: 100%;
            text-transform: uppercase;
        }

        button:hover {
            background-color: #ff1493; /* Deep pink color on hover */
        }

        .task-lists {
            margin-top: 20px;
        }

        h2 {
            color: #b03060; /* Deep pink color */
            margin-bottom: 10px;
            font-size: 1.5rem;
        }

        ul {
            list-style-type: none;
            padding: 0;
        }

        li {
            background-color: #ffe4e1; /* Light pink background for task items */
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: all 0.2s;
        }

        li.completed {
            text-decoration: line-through;
            background-color: #d4edda; /* Light green background for completed tasks */
        }

        .task-buttons {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            margin-top: 10px;
        }

        .task-buttons button {
            background-color: #ff69b4; /* Hot pink background for task buttons */
            padding: 8px 15px;
            font-size: 14px;
            border-radius: 4px;
            transition: background-color 0.3s;
            cursor: pointer;
        }

        .task-buttons button:hover {
            background-color: #ff1493; /* Deep pink color on hover */
        }

        .task-buttons button.complete-btn {
            background-color: #32cd32; /* Lime green for complete button */
        }

        .task-buttons button.complete-btn:hover {
            background-color: #228b22; /* Forest green on hover */
        }

        .task-buttons button.delete-btn {
            background-color: #ff4500; /* Orange red for delete button */
        }

        .task-buttons button.delete-btn:hover {
            background-color: #dc143c; /* Crimson on hover */
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>To-Do List
        <i class="fa-solid fa-pencil"></i></h1>
        <div class="input-section">
            <input type="text" id="task-input" placeholder="Add a new task">
            <input type="date" id="task-date">
            <input type="time" id="task-time">
            <button onclick="addTask()">Add Task</button>
        </div>
        <div class="task-lists">
            <div class="current-tasks">
                <h2>Current Tasks</h2>
                <ul id="current-task-list"></ul>
            </div>
            <div class="completed-tasks">
                <h2>Completed Tasks</h2>
                <ul id="completed-task-list"></ul>
            </div>
        </div>
    </div>
    <script>
        let tasks = JSON.parse(localStorage.getItem('tasks')) || [];

        function saveTasks() {
            localStorage.setItem('tasks', JSON.stringify(tasks));
        }

        function addTask() {
            const taskInput = document.getElementById('task-input');
            const taskDate = document.getElementById('task-date');
            const taskTime = document.getElementById('task-time');
            const taskText = taskInput.value;
            const taskDateTime = `${taskDate.value}T${taskTime.value}`;

            if (taskText && taskDate.value && taskTime.value) {
                const task = {
                    id: Date.now(),
                    text: taskText,
                    date: taskDateTime,
                    completed: false
                };
                tasks.push(task);
                taskInput.value = '';
                taskDate.value = '';
                taskTime.value = '';
                saveTasks();
                renderTasks();
            } else {
                alert('Please enter a task, date, and time.');
            }
        }

        function renderTasks() {
            const currentTaskList = document.getElementById('current-task-list');
            const completedTaskList = document.getElementById('completed-task-list');
            currentTaskList.innerHTML = '';
            completedTaskList.innerHTML = '';

            tasks.forEach(task => {
                const taskItem = document.createElement('li');
                taskItem.textContent = `${task.text} (Due: ${new Date(task.date).toLocaleString()})`;

                const taskButtons = document.createElement('div');
                taskButtons.className = 'task-buttons';

                const completeButton = document.createElement('button');
                completeButton.textContent = 'Complete';
                completeButton.className = 'complete-btn';
                completeButton.onclick = () => completeTask(task.id);

                const editButton = document.createElement('button');
                editButton.textContent = 'Edit';
                editButton.onclick = () => editTask(task.id);

                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'Delete';
                deleteButton.className = 'delete-btn';
                deleteButton.onclick = () => deleteTask(task.id);

                taskButtons.appendChild(completeButton);
                taskButtons.appendChild(editButton);
                taskButtons.appendChild(deleteButton);
                taskItem.appendChild(taskButtons);

                if (task.completed) {
                    taskItem.classList.add('completed');
                    completedTaskList.appendChild(taskItem);
                } else {
                    currentTaskList.appendChild(taskItem);
                }
            });
        }

        function completeTask(id) {
            const task = tasks.find(task => task.id === id);
            task.completed = true;
            saveTasks();
            renderTasks();
        }

        function editTask(id) {
            const task = tasks.find(task => task.id === id);
            const newText = prompt('Edit task:', task.text);
            const newDate = prompt('Edit date:', task.date.split('T')[0]);
            const newTime = prompt('Edit time:', task.date.split('T')[1]);

            if (newText && newDate && newTime) {
                task.text = newText;
                task.date = `${newDate}T${newTime}`;
                saveTasks();
                renderTasks();
            }
        }

        function deleteTask(id) {
            tasks = tasks.filter(task => task.id !== id);
            saveTasks();
            renderTasks();
        }

        document.addEventListener('DOMContentLoaded', () => {
            renderTasks();
        });
    </script>
</body>
</html>
